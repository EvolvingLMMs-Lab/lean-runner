# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import prove_pb2 as prove__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + " but the generated code in prove_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ProveServiceStub:
    """Service for handling Lean proofs."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckProof = channel.unary_unary(
            "/lean_runner.ProveService/CheckProof",
            request_serializer=prove__pb2.CheckProofRequest.SerializeToString,
            response_deserializer=prove__pb2.ProofResult.FromString,
            _registered_method=True,
        )
        self.SubmitProof = channel.unary_unary(
            "/lean_runner.ProveService/SubmitProof",
            request_serializer=prove__pb2.SubmitProofRequest.SerializeToString,
            response_deserializer=prove__pb2.SubmitProofResponse.FromString,
            _registered_method=True,
        )
        self.GetResult = channel.unary_unary(
            "/lean_runner.ProveService/GetResult",
            request_serializer=prove__pb2.GetResultRequest.SerializeToString,
            response_deserializer=prove__pb2.ProofResult.FromString,
            _registered_method=True,
        )


class ProveServiceServicer:
    """Service for handling Lean proofs."""

    def CheckProof(self, request, context):
        """Synchronously check a Lean proof and return the result."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubmitProof(self, request, context):
        """Asynchronously submit a Lean proof for execution."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetResult(self, request, context):
        """Retrieve the result of a previously submitted proof."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ProveServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CheckProof": grpc.unary_unary_rpc_method_handler(
            servicer.CheckProof,
            request_deserializer=prove__pb2.CheckProofRequest.FromString,
            response_serializer=prove__pb2.ProofResult.SerializeToString,
        ),
        "SubmitProof": grpc.unary_unary_rpc_method_handler(
            servicer.SubmitProof,
            request_deserializer=prove__pb2.SubmitProofRequest.FromString,
            response_serializer=prove__pb2.SubmitProofResponse.SerializeToString,
        ),
        "GetResult": grpc.unary_unary_rpc_method_handler(
            servicer.GetResult,
            request_deserializer=prove__pb2.GetResultRequest.FromString,
            response_serializer=prove__pb2.ProofResult.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "lean_runner.ProveService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "lean_runner.ProveService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class ProveService:
    """Service for handling Lean proofs."""

    @staticmethod
    def CheckProof(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/lean_runner.ProveService/CheckProof",
            prove__pb2.CheckProofRequest.SerializeToString,
            prove__pb2.ProofResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SubmitProof(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/lean_runner.ProveService/SubmitProof",
            prove__pb2.SubmitProofRequest.SerializeToString,
            prove__pb2.SubmitProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetResult(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/lean_runner.ProveService/GetResult",
            prove__pb2.GetResultRequest.SerializeToString,
            prove__pb2.ProofResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
