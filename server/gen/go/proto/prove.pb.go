// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: prove.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for the prover application.
type Config struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LeanExecutable string                 `protobuf:"bytes,1,opt,name=lean_executable,json=leanExecutable,proto3" json:"lean_executable,omitempty"`
	LeanWorkspace  string                 `protobuf:"bytes,2,opt,name=lean_workspace,json=leanWorkspace,proto3" json:"lean_workspace,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_prove_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetLeanExecutable() string {
	if x != nil {
		return x.LeanExecutable
	}
	return ""
}

func (x *Config) GetLeanWorkspace() string {
	if x != nil {
		return x.LeanWorkspace
	}
	return ""
}

// Configuration for a single proof execution.
type ProofConfig struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Timeout      *durationpb.Duration   `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CpuTimeLimit *durationpb.Duration   `protobuf:"bytes,2,opt,name=cpu_time_limit,json=cpuTimeLimit,proto3" json:"cpu_time_limit,omitempty"`
	AllTactics   bool                   `protobuf:"varint,3,opt,name=all_tactics,json=allTactics,proto3" json:"all_tactics,omitempty"`
	Ast          bool                   `protobuf:"varint,4,opt,name=ast,proto3" json:"ast,omitempty"`
	Tactics      []string               `protobuf:"bytes,5,rep,name=tactics,proto3" json:"tactics,omitempty"`
	Premises     []string               `protobuf:"bytes,6,rep,name=premises,proto3" json:"premises,omitempty"`
	// Resource limits
	MemoryLimit   uint64 `protobuf:"varint,7,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`         // Virtual memory limit in bytes
	StackLimit    uint64 `protobuf:"varint,8,opt,name=stack_limit,json=stackLimit,proto3" json:"stack_limit,omitempty"`            // Stack size limit in bytes
	FileSizeLimit uint64 `protobuf:"varint,9,opt,name=file_size_limit,json=fileSizeLimit,proto3" json:"file_size_limit,omitempty"` // Maximum file size limit in bytes
	NumFileLimit  uint64 `protobuf:"varint,10,opt,name=num_file_limit,json=numFileLimit,proto3" json:"num_file_limit,omitempty"`   // Maximum number of open files
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofConfig) Reset() {
	*x = ProofConfig{}
	mi := &file_prove_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofConfig) ProtoMessage() {}

func (x *ProofConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofConfig.ProtoReflect.Descriptor instead.
func (*ProofConfig) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{1}
}

func (x *ProofConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ProofConfig) GetCpuTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.CpuTimeLimit
	}
	return nil
}

func (x *ProofConfig) GetAllTactics() bool {
	if x != nil {
		return x.AllTactics
	}
	return false
}

func (x *ProofConfig) GetAst() bool {
	if x != nil {
		return x.Ast
	}
	return false
}

func (x *ProofConfig) GetTactics() []string {
	if x != nil {
		return x.Tactics
	}
	return nil
}

func (x *ProofConfig) GetPremises() []string {
	if x != nil {
		return x.Premises
	}
	return nil
}

func (x *ProofConfig) GetMemoryLimit() uint64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *ProofConfig) GetStackLimit() uint64 {
	if x != nil {
		return x.StackLimit
	}
	return 0
}

func (x *ProofConfig) GetFileSizeLimit() uint64 {
	if x != nil {
		return x.FileSizeLimit
	}
	return 0
}

func (x *ProofConfig) GetNumFileLimit() uint64 {
	if x != nil {
		return x.NumFileLimit
	}
	return 0
}

type CheckProofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Proof string                 `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	// Configuration for Lean proof execution.
	Config        *ProofConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckProofRequest) Reset() {
	*x = CheckProofRequest{}
	mi := &file_prove_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckProofRequest) ProtoMessage() {}

func (x *CheckProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckProofRequest.ProtoReflect.Descriptor instead.
func (*CheckProofRequest) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{2}
}

func (x *CheckProofRequest) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CheckProofRequest) GetConfig() *ProofConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SubmitProofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Proof string                 `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	// Configuration for Lean proof execution.
	Config        *ProofConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitProofRequest) Reset() {
	*x = SubmitProofRequest{}
	mi := &file_prove_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProofRequest) ProtoMessage() {}

func (x *SubmitProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProofRequest.ProtoReflect.Descriptor instead.
func (*SubmitProofRequest) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitProofRequest) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *SubmitProofRequest) GetConfig() *ProofConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SubmitProofResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProofId       string                 `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitProofResponse) Reset() {
	*x = SubmitProofResponse{}
	mi := &file_prove_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProofResponse) ProtoMessage() {}

func (x *SubmitProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProofResponse.ProtoReflect.Descriptor instead.
func (*SubmitProofResponse) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitProofResponse) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

type GetResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProofId       string                 `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	mi := &file_prove_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{5}
}

func (x *GetResultRequest) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

// Represents the result of a proof execution.
type ProofResult struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	ProofId string                 `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	Success bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Result can be any JSON-like structure.
	Result        *structpb.Struct `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ErrorMessage  string           `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofResult) Reset() {
	*x = ProofResult{}
	mi := &file_prove_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofResult) ProtoMessage() {}

func (x *ProofResult) ProtoReflect() protoreflect.Message {
	mi := &file_prove_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofResult.ProtoReflect.Descriptor instead.
func (*ProofResult) Descriptor() ([]byte, []int) {
	return file_prove_proto_rawDescGZIP(), []int{6}
}

func (x *ProofResult) GetProofId() string {
	if x != nil {
		return x.ProofId
	}
	return ""
}

func (x *ProofResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProofResult) GetResult() *structpb.Struct {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ProofResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_prove_proto protoreflect.FileDescriptor

const file_prove_proto_rawDesc = "" +
	"\n" +
	"\vprove.proto\x12\vlean_runner\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/duration.proto\"X\n" +
	"\x06Config\x12'\n" +
	"\x0flean_executable\x18\x01 \x01(\tR\x0eleanExecutable\x12%\n" +
	"\x0elean_workspace\x18\x02 \x01(\tR\rleanWorkspace\"\xfe\x02\n" +
	"\vProofConfig\x123\n" +
	"\atimeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12?\n" +
	"\x0ecpu_time_limit\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\fcpuTimeLimit\x12\x1f\n" +
	"\vall_tactics\x18\x03 \x01(\bR\n" +
	"allTactics\x12\x10\n" +
	"\x03ast\x18\x04 \x01(\bR\x03ast\x12\x18\n" +
	"\atactics\x18\x05 \x03(\tR\atactics\x12\x1a\n" +
	"\bpremises\x18\x06 \x03(\tR\bpremises\x12!\n" +
	"\fmemory_limit\x18\a \x01(\x04R\vmemoryLimit\x12\x1f\n" +
	"\vstack_limit\x18\b \x01(\x04R\n" +
	"stackLimit\x12&\n" +
	"\x0ffile_size_limit\x18\t \x01(\x04R\rfileSizeLimit\x12$\n" +
	"\x0enum_file_limit\x18\n" +
	" \x01(\x04R\fnumFileLimit\"[\n" +
	"\x11CheckProofRequest\x12\x14\n" +
	"\x05proof\x18\x01 \x01(\tR\x05proof\x120\n" +
	"\x06config\x18\x02 \x01(\v2\x18.lean_runner.ProofConfigR\x06config\"\\\n" +
	"\x12SubmitProofRequest\x12\x14\n" +
	"\x05proof\x18\x01 \x01(\tR\x05proof\x120\n" +
	"\x06config\x18\x02 \x01(\v2\x18.lean_runner.ProofConfigR\x06config\"0\n" +
	"\x13SubmitProofResponse\x12\x19\n" +
	"\bproof_id\x18\x01 \x01(\tR\aproofId\"-\n" +
	"\x10GetResultRequest\x12\x19\n" +
	"\bproof_id\x18\x01 \x01(\tR\aproofId\"\x98\x01\n" +
	"\vProofResult\x12\x19\n" +
	"\bproof_id\x18\x01 \x01(\tR\aproofId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12/\n" +
	"\x06result\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x06result\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessage2V\n" +
	"\fProveService\x12F\n" +
	"\n" +
	"CheckProof\x12\x1e.lean_runner.CheckProofRequest\x1a\x18.lean_runner.ProofResultB=Z;github.com/EvolvingLMMs-Lab/lean-runner/server/gen/go/protob\x06proto3"

var (
	file_prove_proto_rawDescOnce sync.Once
	file_prove_proto_rawDescData []byte
)

func file_prove_proto_rawDescGZIP() []byte {
	file_prove_proto_rawDescOnce.Do(func() {
		file_prove_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_prove_proto_rawDesc), len(file_prove_proto_rawDesc)))
	})
	return file_prove_proto_rawDescData
}

var file_prove_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_prove_proto_goTypes = []any{
	(*Config)(nil),              // 0: lean_runner.Config
	(*ProofConfig)(nil),         // 1: lean_runner.ProofConfig
	(*CheckProofRequest)(nil),   // 2: lean_runner.CheckProofRequest
	(*SubmitProofRequest)(nil),  // 3: lean_runner.SubmitProofRequest
	(*SubmitProofResponse)(nil), // 4: lean_runner.SubmitProofResponse
	(*GetResultRequest)(nil),    // 5: lean_runner.GetResultRequest
	(*ProofResult)(nil),         // 6: lean_runner.ProofResult
	(*durationpb.Duration)(nil), // 7: google.protobuf.Duration
	(*structpb.Struct)(nil),     // 8: google.protobuf.Struct
}
var file_prove_proto_depIdxs = []int32{
	7, // 0: lean_runner.ProofConfig.timeout:type_name -> google.protobuf.Duration
	7, // 1: lean_runner.ProofConfig.cpu_time_limit:type_name -> google.protobuf.Duration
	1, // 2: lean_runner.CheckProofRequest.config:type_name -> lean_runner.ProofConfig
	1, // 3: lean_runner.SubmitProofRequest.config:type_name -> lean_runner.ProofConfig
	8, // 4: lean_runner.ProofResult.result:type_name -> google.protobuf.Struct
	2, // 5: lean_runner.ProveService.CheckProof:input_type -> lean_runner.CheckProofRequest
	6, // 6: lean_runner.ProveService.CheckProof:output_type -> lean_runner.ProofResult
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_prove_proto_init() }
func file_prove_proto_init() {
	if File_prove_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_prove_proto_rawDesc), len(file_prove_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_prove_proto_goTypes,
		DependencyIndexes: file_prove_proto_depIdxs,
		MessageInfos:      file_prove_proto_msgTypes,
	}.Build()
	File_prove_proto = out.File
	file_prove_proto_goTypes = nil
	file_prove_proto_depIdxs = nil
}
