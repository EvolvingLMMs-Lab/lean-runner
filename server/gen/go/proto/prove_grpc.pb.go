// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/prove.proto

package lean_runner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProveService_CheckProof_FullMethodName  = "/lean_runner.ProveService/CheckProof"
	ProveService_SubmitProof_FullMethodName = "/lean_runner.ProveService/SubmitProof"
	ProveService_GetResult_FullMethodName   = "/lean_runner.ProveService/GetResult"
)

// ProveServiceClient is the client API for ProveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for handling Lean proofs.
type ProveServiceClient interface {
	// Synchronously check a Lean proof and return the result.
	CheckProof(ctx context.Context, in *CheckProofRequest, opts ...grpc.CallOption) (*ProofResult, error)
	// Asynchronously submit a Lean proof for execution.
	SubmitProof(ctx context.Context, in *SubmitProofRequest, opts ...grpc.CallOption) (*SubmitProofResponse, error)
	// Retrieve the result of a previously submitted proof.
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*ProofResult, error)
}

type proveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProveServiceClient(cc grpc.ClientConnInterface) ProveServiceClient {
	return &proveServiceClient{cc}
}

func (c *proveServiceClient) CheckProof(ctx context.Context, in *CheckProofRequest, opts ...grpc.CallOption) (*ProofResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProofResult)
	err := c.cc.Invoke(ctx, ProveService_CheckProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proveServiceClient) SubmitProof(ctx context.Context, in *SubmitProofRequest, opts ...grpc.CallOption) (*SubmitProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitProofResponse)
	err := c.cc.Invoke(ctx, ProveService_SubmitProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proveServiceClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*ProofResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProofResult)
	err := c.cc.Invoke(ctx, ProveService_GetResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProveServiceServer is the server API for ProveService service.
// All implementations must embed UnimplementedProveServiceServer
// for forward compatibility.
//
// Service for handling Lean proofs.
type ProveServiceServer interface {
	// Synchronously check a Lean proof and return the result.
	CheckProof(context.Context, *CheckProofRequest) (*ProofResult, error)
	// Asynchronously submit a Lean proof for execution.
	SubmitProof(context.Context, *SubmitProofRequest) (*SubmitProofResponse, error)
	// Retrieve the result of a previously submitted proof.
	GetResult(context.Context, *GetResultRequest) (*ProofResult, error)
	mustEmbedUnimplementedProveServiceServer()
}

// UnimplementedProveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProveServiceServer struct{}

func (UnimplementedProveServiceServer) CheckProof(context.Context, *CheckProofRequest) (*ProofResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProof not implemented")
}
func (UnimplementedProveServiceServer) SubmitProof(context.Context, *SubmitProofRequest) (*SubmitProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProof not implemented")
}
func (UnimplementedProveServiceServer) GetResult(context.Context, *GetResultRequest) (*ProofResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedProveServiceServer) mustEmbedUnimplementedProveServiceServer() {}
func (UnimplementedProveServiceServer) testEmbeddedByValue()                      {}

// UnsafeProveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProveServiceServer will
// result in compilation errors.
type UnsafeProveServiceServer interface {
	mustEmbedUnimplementedProveServiceServer()
}

func RegisterProveServiceServer(s grpc.ServiceRegistrar, srv ProveServiceServer) {
	// If the following call pancis, it indicates UnimplementedProveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProveService_ServiceDesc, srv)
}

func _ProveService_CheckProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProveServiceServer).CheckProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProveService_CheckProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProveServiceServer).CheckProof(ctx, req.(*CheckProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProveService_SubmitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProveServiceServer).SubmitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProveService_SubmitProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProveServiceServer).SubmitProof(ctx, req.(*SubmitProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProveService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProveServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProveService_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProveServiceServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProveService_ServiceDesc is the grpc.ServiceDesc for ProveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lean_runner.ProveService",
	HandlerType: (*ProveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckProof",
			Handler:    _ProveService_CheckProof_Handler,
		},
		{
			MethodName: "SubmitProof",
			Handler:    _ProveService_SubmitProof_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _ProveService_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/prove.proto",
}
